Liste des fonctionnalités de la version v4.1 :

- Implementation des cases spéciales (téléporteur, case magique, pièges) : Julien et Elliot
- Systeme d'attaque du héros : Noah
- Systeme de barre de vie : Chouaid
- Detection du héro par le monstre pas famtome : Chouaid
- Cycle d'animation du héro : Julien
- implementation GameOver victoire/defaite : Noah et Elliot et Chouaid
- Création des labyrinthes 2 3 4 : Elliot
- Fond d'écran : Julien
- Menu de sélection : Julien et Elliot
- Tests unitaires : Elliot

IMG UML :
https://www.plantuml.com/plantuml/img/ZLPRQzim57xNhn1vIg49A-ojOsnjqmiq8wo5RPG-AFQ9BIfBdYod2Q7_VKUIBv8Jmqf9xNFvldDFlrM6QLCNWX33ZG1wevAw06be2ZHHCe7IS2NfzlFyWf14iAgYZsozrroQ_8uLy6MfKX3mbVAY560zAshb1qee_cmLJsa6ilEPddd5ay7NZ1hb7wpueoNumRV0wXQvGK9dAfsYVy_0h0JRW_xTmaRIFwtKHP7aJ6UWFVZqbcEo6_m8JL8e1Kj0tuDMqztv_ZzYxHA3utXVv2l-Kj6PqEadgjxEwGKjQjs0hvKIm6JBRIkuKbN5rmAcDflTkKjg7vBQ-Bh2myw0J2kwaDX12Agrk-mUz_rZkRsCU7br0ooDSbegMHaDOmoa0M-06r1AN0ah-CdAKgia1zs0iZMYiSHGZzwY79VmMacZbH2WwTXOzIPDec-mV-GLnkVea0MdDH2G3tf4isBuQJaMCkFocAFHDmIu88OdhdJk_Psd9c-aNL5pu5bkF9jptc0hGx2Ex13DwIyBDfZTUuSLZMwgsNkRJ0m_nBLTnPRUSich7D881RPAR66wsDhrXZFRW1Wih7yCYs5Tgw9WCerhQhsyvPrcPJvqSxG5LY2AmvqSvAfm08yL3eZ_hI4QIITzwABjUFpGbRR8aVqDLWnNTSKaY17hKpjyPyU66TKFe9lsbzUNLtl5G8FkZJr4oP8tbW5Tj2DqQ66VSMzg3RSub4hlKMuJlQet6uH97mhhPBn9DP_FetDfYR3WQouPhvJqJ8CzkcOL7FfbxtUzboNO7irwJV0Uny7jPnz1ZeqMy5H2mfbOe65YflRcq3oeshBMmH8_Ox5AfGtKkhiNFiBEPCK1gKQKIvRPfe-fdt2iHrJVjSQJFgQzqgTX6_b4JcOpcueRwhwtT3QRN4mQx6EvTHW8vtCviM66SZH5TF-DGqvDcJNGTjqxA_-7UZnqZhviAN5TY62RO-qyg0mKDjL0sjCJ1-L0wdAumcHm23pNAQFsieq1nP5xdE4D9eEzzjKDbvT4c-pr8Ji91y-h0maP7YYCmI54j8Hym-70VuB-0G00


SCRIPT UML :
@startuml

title Document de conception v4.1

class LabyrinthGame<Modele> implements Game{
    void genLabyrinth()
    String toString()
}

class Niveau<Modele>{
    int niveau
    int getPlayerX()
    int getPlayerY()
    void chargerNiveau(File file)
    void deplacerHero(x,y)
    String toString()
}

class Labyrinthe<Modele>{
    int[n][n] labyrinthe (0 ok, 1 mur)
    boolean deplacementPossible(int x, int y)
}

class Hero<Modele> extends Entite{
    int x;
    int y;
    int pv;
    boolean isDead()
}

class Monstre<Modele> extends Entite{
int x;
int y;
int pv;
void seRapprocher()
}

abstract class Entite{
}

class LabyrinthController <Modele> implements GameController{
    keyListener() actionListener()
}

class LabyrinthPainter <Engine> implements GamePainter{
    static int
    width static
    int height
}

interface GamePainter <Engine>{
    int getWidth()
    int getHeight()
    void draw()
}

interface Game <Engine>{
    bool isFinished()
    void evolve(Event e)
}

interface GameController <Engine>{
    getCommand()
}

class GameEngineGraph <Engine>{
    void main()
    void startConsole()
    void startGraphique()
}

class GraphInterface <Engine>{
void paint()
}

class DrawingPanel <Engine>{
void paint()
}

class LabyrintheGenerator <Modele>{
int[][] genererLabyrinthe()
}

package Elements {

class TextureFactory {
    BufferedImage textures...
    void genererCombinaison()
}

abstract class Case{
    int x
    int y
    int xcamera
    int ycamera
    BufferedImage image
    void handleSpecialEffect(Hero h)
}

class Mur{
}

class Teleporteur extends Case{
}

class Piege extends Case{
}

class Magique extends Case{
}

class Sol extends Case{
}

class Arrive extends Case{
}

class Brique extends Case{
}

Brique "n"-- Mur
}

Labyrinthe --"1" Arrive
Labyrinthe --"1" Mur
Labyrinthe --"1..n" Sol
Labyrinthe "1"-- Niveau
LabyrintheGenerator "1"-right- Niveau
Niveau "1..n"-- LabyrinthGame
Hero "1"-- Niveau
Monstre "1.. n"-- Niveau
Case "1.. n"-- Labyrinthe
Game "1"--up GameEngineGraph
GameController "1"-- GameEngineGraph
GamePainter "1"--up GameEngineGraph
LabyrinthGame "1"-- LabyrinthPainter
GraphInterface --"1" DrawingPanel
DrawingPanel --"1" GamePainter
Teleporteur --"1" Teleporteur
GameEngineGraph -- "1" GraphInterface

@enduml



